package SpeedrunSorter;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

/**
 * View class by MVC principle.
 * This class handles what the user sees
 *
 * @author Maxie
 */
public class ViewGUI extends JFrame {
    private JTable table;
    private JPanel panel;
    private JMenuBar menuBar;
    private JMenuItem exitOption;
    private JLabel currentSorter;
    private GridBagConstraints c = new GridBagConstraints();
    private ArrayComparator sorter;

    private JButton sortGame;
    private JButton sortEstimate;
    private JButton sortCategory;
    private JButton sortRunner;
    private JButton exitButton;

    /**
     * Constructor for View
     *
     * @param data        Takes in data to be shown in the JTable
     * @param columnNames Takes in the name of the columns in the JTable
     * @throws IOException catches errors generated by icon image in createPanel()
     */
    public ViewGUI(String[][] data, String[] columnNames) throws IOException {

        createTable(data, columnNames);
        createMenu();
        createPanel();
        createButtons(data);
    }

    /**
     * Creates the table that shows the data
     *
     * @param data        multiArray containing displayed data
     * @param columnNames Array containing the columns
     */
    public void createTable(String[][] data, String[] columnNames) {
        table = new JTable(data, columnNames);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        //resize columns when you make them bigger/smaller
        table.setShowVerticalLines(false); //remove vertical lines in table
        setCellsAlignment(table, SwingConstants.CENTER);
    }

    /**
     * Creates a panel, scrollpane and frame.
     * Here are all the options for window properties
     *
     * @throws IOException used to catch errors in reading icon file
     */
    public void createPanel() throws IOException {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout()); //sets table to GridBagLayout
        //defines GridBagConstraints, used for aligning elements
        //GridBagConstraints c = new GridBagConstraints();
        panel.setOpaque(true); //allows us to use background color
        panel.setBackground(Color.DARK_GRAY);

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(450, 88));
        //(x, y) or (width, height) in pixels

        //Create the top-level-container and add components to the containers
        //containers
        panel.add(scrollPane);
        JFrame frame = new JFrame("List of runs");
        frame.add(panel);
        //used if you want to set a fixed size to window
        frame.setPreferredSize(new Dimension(600, 400));
        frame.setLocationRelativeTo(null); //centers window
        frame.setResizable(true); //prevents resizing of window
        //sets the icon image file
        frame.setIconImage(ImageIO.read(new File("src/image/ESA_Logo.png")));
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        //sets the visibility of the window, defaults to true if not defined
        frame.setVisible(true);
        frame.pack();
        frame.setJMenuBar(menuBar);


    }

    /**
     * Method for creating the JMenu with system options
     */
    public void createMenu() {

        menuBar = new JMenuBar();

        JMenu systemMenu = new JMenu("System"); //create menubar titled system
        menuBar.add(systemMenu);

        exitOption = new JMenuItem("Exit");
        getExitOption().setToolTipText("Exit application");
        systemMenu.add(getExitOption());
        setJMenuBar(menuBar);
    }

    /**
     * Method for creating the buttons used.
     * Each button has an ActionListener that sends sortingmethod
     * and data to SortingMethod.java
     *
     * @param data multiArray containing the data displayed in table
     */
    public void createButtons(String[][] data) {
        sortGame = new JButton("Sort by game");
        c.fill = GridBagConstraints.CENTER; //align button in the center
        c.insets = new Insets(5, 5, 5, 5); //padding for button
        c.gridy = 1; //put button at row 1, row 0 = table
        panel.add(sortGame, c);
        //create listener for button, determines what button does when pressed
        sortGame.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                /*
                sends following data to sortString in class ArrayComparator
                reverse: false
                table: data
                method: ESTIMATE(2)
                */

                sorter.sortString(false, data, SortingMethod.GAME);
                //test to see if data is sorted
                System.out.println(ControllerGUI.toDataString(data));
                //redraw the table
                panel.repaint();
                currentSorter.setText("Now Sorting by: Game");
            }
        });

        sortEstimate = new JButton("Sort by Estimate");
        c.fill = GridBagConstraints.CENTER;
        c.insets = new Insets(5, 5, 5, 5);
        c.gridy = 3; //put button at row 3
        panel.add(sortEstimate, c);
        sortEstimate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sorter.sortString(false, data, SortingMethod.ESTIMATE);
                System.out.println(ControllerGUI.toDataString(data));
                panel.repaint();
                currentSorter.setText("Now Sorting by: Estimate");
            }
        });

        sortCategory = new JButton("Sort by Category");
        c.fill = GridBagConstraints.CENTER;
        c.insets = new Insets(5, 5, 5, 5);
        c.gridy = 2; //put button at row 2
        panel.add(sortCategory, c);
        sortCategory.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sorter.sortString(false, data, SortingMethod.CATEGORY);
                System.out.println(ControllerGUI.toDataString(data));
                panel.repaint();
                currentSorter.setText("Now Sorting by: Category");
            }
        });

        sortRunner = new JButton("Sort by Runner");
        c.fill = GridBagConstraints.CENTER;
        c.insets = new Insets(5, 5, 5, 5);
        c.gridy = 4; //put button at row 4
        panel.add(sortRunner, c);
        sortRunner.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sorter.sortString(false, data, SortingMethod.RUNNER);
                System.out.println(ControllerGUI.toDataString(data));
                panel.repaint();
                currentSorter.setText("Now Sorting by: Runner");
            }
        });

        //Label that displays current method being used to sort
        currentSorter = new JLabel();
        currentSorter.setText("Now Sorting by: Default");
        currentSorter.setForeground(Color.WHITE);
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.CENTER;
        c.insets = new Insets(5, 5, 5, 5);
        c.gridy = 5; //put button at row 4
        panel.add(currentSorter, c);

        exitButton = new JButton("Exit");
        //defins the anchor of the button, set to bottom right corner
        c.anchor = GridBagConstraints.BELOW_BASELINE_TRAILING;
        c.fill = GridBagConstraints.CENTER;
        c.insets = new Insets(5, 5, 5, 5);
        c.gridy = 6; //allign with row 6
        panel.add(exitButton, c);

    }


    /**
     * Used to align the text in table
     *
     * @param table     Selects which table to align
     * @param alignment Selects which alignment to use
     */
    public static void setCellsAlignment(JTable table, int alignment) {
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(alignment);

        TableModel tableModel = table.getModel();

        for (int columnIndex = 0; columnIndex < tableModel.getColumnCount(); columnIndex++) {
            table.getColumnModel().getColumn(columnIndex).setCellRenderer(rightRenderer);
        }
    }

    /**
     * Getter for exitButton
     *
     * @return returns exitButton
     * @see ControllerGUI
     */
    public JButton getExitButton() {
        return exitButton;
    }

    /**
     * Sets the sorter
     *
     * @param sorter sorter created in Controller
     * @see ControllerGUI
     */
    public void setSorter(ArrayComparator sorter) {
        this.sorter = sorter;
    }

    /**
     * getter for exitOption in JMenu
     *
     * @return returns exitOption
     * @see ControllerGUI
     */
    public JMenuItem getExitOption() {
        return exitOption;
    }
}

